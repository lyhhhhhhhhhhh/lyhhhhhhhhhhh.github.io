<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>🍋航爱coding</title>
  
  <subtitle>热爱生活 热爱自我</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lyhhhhhhhhhhh.github.io/"/>
  <updated>2020-01-23T15:06:37.064Z</updated>
  <id>http://lyhhhhhhhhhhh.github.io/</id>
  
  <author>
    <name>lyhhhhh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shell learning</title>
    <link href="http://lyhhhhhhhhhhh.github.io/2020/01/23/Shell-learning/"/>
    <id>http://lyhhhhhhhhhhh.github.io/2020/01/23/Shell-learning/</id>
    <published>2020-01-23T04:04:05.000Z</published>
    <updated>2020-01-23T15:06:37.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell学习笔记"><a href="#shell学习笔记" class="headerlink" title="shell学习笔记"></a>shell学习笔记</h1><blockquote><p><a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html" target="_blank" rel="noopener">参考资料</a></p></blockquote><h2 id="shell简介"><a href="#shell简介" class="headerlink" title="shell简介"></a>shell简介</h2><p>shell本身是用户访问内核的桥梁，所谓的shell学习，实际上是学习shell脚本。</p><p>和大多数脚本语言一样，shell只需要一个编辑器和一个解释器就可以了，常见的shell解释器种类众多，有sh、bash、zsh等，我们本次学习bash脚本。</p><a id="more"></a><p>第一个shell脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello, world!"</span></span><br></pre></td></tr></table></figure><p>其中第一行告诉系统使用什么解释器来解释shell脚本。</p><p>运行shell的方法：</p><ol><li>作为可执行程序</li><li>作为命令解释器的参数</li></ol><h2 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h2><p>定义变量时不需要加美元符号，如：<br><code>my_name=&quot;lyhhhhh&quot;</code></p><p>命名规则：</p><ol><li>只能使用英文，不能以数字开头</li><li>中间不可以有空格，可以使用下划线</li><li>不能使用标点</li><li>注意不能使用保留关键字</li></ol><p>使用一个定义过的变量，只需要变量名加美元符号即可，而变量名外面的花括号是可选的，添加是为了方便区分界限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_name=<span class="string">'lyhhhhh'</span></span><br><span class="line"><span class="comment">#the ways below are both valid</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$my_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;my_name&#125;</span></span><br></pre></td></tr></table></figure><p>可以使用readonly命令将变量声明为只读变量<br>也可以使用unset命令将变量删除，之后就无法使用，unset命令不能使用在readonly变量上</p><p><strong>变量的类型：</strong></p><ol><li>局部变量： 局部变量在脚本中定义，只在当前shell实例中有效</li><li>环境变量： 属于系统定义的变量，所有的程序和shell都可以访问</li><li>shell变量： 是shell程序设置的特殊变量，一部分是环境变量，一部分是局部变量，这些变量保证了shell的正常运行</li></ol><h3 id="shell字符串"><a href="#shell字符串" class="headerlink" title="shell字符串"></a>shell字符串</h3><p>字符串是shell中最经常使用的类型，实际上在shell中除了字符串和数字也没啥可以用的了。</p><p>字符串分为单引号和双引号两种，两者的区别在于单引号字符串的内容即为引号中的内容，如果里面有对变量的引用是无效的。<br>而双引号中可以存在转义字符和变量等可以解释的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">greeting_2=<span class="string">'hello, '</span><span class="variable">$your_name</span><span class="string">' !'</span></span><br><span class="line">greeting_3=<span class="string">'hello, $&#123;your_name&#125; !'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, runoob ! hello, runoob !</span><br><span class="line">hello, runoob ! hello, <span class="variable">$&#123;your_name&#125;</span> !</span><br></pre></td></tr></table></figure><p><strong>shell中的字符串存在一些可以使用的操作：</strong></p><ol><li>获取字符串长度：在字符串前添加#</li><li>提取子字符串：${str:begin_index:num} 形如前式，其中beginindex为起始索引（起始为0），num为字符数量。</li><li>查找子字符串：见下面例子，注意使用的是反引号而不是单引号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">'hello, world'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#output: 4, calculate the length of the string</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:3&#125;</span> <span class="comment">#output: ell, substring</span></span><br><span class="line"><span class="built_in">echo</span> `exper index <span class="string">"<span class="variable">$string</span>"</span> ol`</span><br><span class="line"><span class="comment"># 输出o和l在字符串中的位置，那个先出现就输出哪个，注意是反引号而不是单引号。</span></span><br></pre></td></tr></table></figure><h3 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h3><p>bash支持一维数组而不支持多维数组，类似于c语言，数组元素下标从0开始，可以是表达式，但是需要值合法。</p><p>shell中使用括号表示数组，使用空格将数组元素分开。<br>也可以单个定义数组各个元素，下标可以不连续。</p><p>获取数组长度与获取字符串长度类似，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">length=<span class="variable">$&#123;#array[@]&#125;</span></span><br><span class="line"><span class="comment"># get the num of the array</span></span><br><span class="line">length=<span class="variable">$&#123;#array[*]&#125;</span></span><br><span class="line"><span class="comment"># same as the way given above</span></span><br><span class="line"></span><br><span class="line">length=<span class="variable">$&#123;#array[n]&#125;</span></span><br><span class="line"><span class="comment"># get the length of the array[n]</span></span><br></pre></td></tr></table></figure><h3 id="shell注释"><a href="#shell注释" class="headerlink" title="shell注释"></a>shell注释</h3><p>单行注释通过#来实现。<br>多行注释可以使用每行都添加#或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure><p>其中！可以被其他标志代替。</p><h2 id="shell传递参数"><a href="#shell传递参数" class="headerlink" title="shell传递参数"></a>shell传递参数</h2><p>在执行脚本时我们可以通过命令行为脚本附加参数，调用这些参数的规则如$n，n=0表示的是脚本文件名，1、2、3···以此类推为第一第二个参数</p><p>另外还有几个特殊的参数：</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>将所有参数合并到一个字符输出</td></tr><tr><td>$$</td><td>脚本当前运行进程的id</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的id</td></tr><tr><td>$@</td><td>与第二个类似，不过是以多个字符串组合的形式</td></tr><tr><td>$-</td><td>显示shell使用的当前选项，和set命令相同</td></tr><tr><td>$?</td><td>现实最后命令的退出状态，0为没有错误</td></tr></tbody></table><p>$*和$@区别：只有在双括号中才能显现出来，例子如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"$*"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>output:<br>1 2 3</p><p>1<br>2<br>3</p><h2 id="shell运算符"><a href="#shell运算符" class="headerlink" title="shell运算符"></a>shell运算符</h2><p>shell和其他语言一样支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>后两者比较有趣，后面会详细介绍</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算只能对于数字，不能适用于字符串，除非字符串全部由数字构成。</p><p>原生的bash不支持简单的数学运算，需要通过其他的命令来实现，比如awk和expr，其中expr最常用，expr是一款表达式计算工具，可以完成表达式确知操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var=`expr 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"the sum of two nums: <span class="variable">$var</span>"</span></span><br></pre></td></tr></table></figure><p>应当注意的是，表达式中的运算符和数字之间应当有空格，这和我们大多数的习惯不同。</p><p>常用的算数运算符和C语言类似，即加减乘除、取余等</p><p><strong>注意</strong>：乘号前面需要加\转义</p><h3 id="shell中-的使用方式"><a href="#shell中-的使用方式" class="headerlink" title="shell中[]的使用方式"></a>shell中[]的使用方式</h3><p><strong>[]在shell中作为测试语句说明</strong><br>比如算术比较、文件属性比较、字符串比较等</p><p>使用算术比较举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"equal"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>值得注意的是，【】和比较的元素之间需要使用空格隔开。除了使用==、！=等C语言类似的算术比较之外，我们还可以使用-eq这样的比较运算符。例如，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$var</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"var=0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$var1</span> -eq 0 -a <span class="variable">$var2</span> -gt 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>常用的运算符如下：</p><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>-gt</td><td>greater than</td></tr><tr><td>-lt</td><td>less than</td></tr><tr><td>-ge</td><td>greater and equal</td></tr><tr><td>-lt</td><td>less and equal</td></tr><tr><td>-ne</td><td>not equal</td></tr><tr><td>-a, -o</td><td>and or（用于结合多个判断操作）</td></tr></tbody></table><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>同c等类似，逻辑运算无非就是 ｜｜ 和 &amp;&amp;<br>需要注意的是，一旦使用逻辑运算，最好使用双中括号，不然可能出现错误，这在字符串运算中也是类似的。</p><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p>常用运算符：</p><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>=</td><td>判断运算符是否相等，返回true或者false</td></tr><tr><td>！=</td><td>判断运算符是否不等</td></tr><tr><td>-z</td><td>检测字符串长度是否为0，为0为true</td></tr><tr><td>-n</td><td>功能同上，返回值相反。</td></tr><tr><td>$</td><td>检测是否为空，不为空则true</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>用于测试Unix文件属性</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>-r、-w、-x</td><td>测试文件是否可读可写可执行</td></tr><tr><td>-c、-b</td><td>测试是否为字符或者块设备文件</td></tr><tr><td>-d</td><td>测试是否为目录</td></tr><tr><td>-e</td><td>测试文件（目录）是否存在</td></tr><tr><td>-s</td><td>测试是否为空，不为空返回true</td></tr></tbody></table><h2 id="shell中的printf"><a href="#shell中的printf" class="headerlink" title="shell中的printf"></a>shell中的printf</h2><p>和c语言基本一致，除了不需要括号以外，应当注意的是当参数比规格化字符串多时，会按照该格式将多出的参数全部输出</p><p><code>printf &quot;%s %s %s\n&quot; a b c d e f g h i j</code></p><p>输出为：<br>a b c<br>d e f<br>g h i<br>j</p><p>转义字符等和c语言一致</p><h2 id="shell-test"><a href="#shell-test" class="headerlink" title="shell test"></a>shell test</h2><p>test指令实际上和上文中提到的[]功能一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># they are same</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$a</span> == <span class="variable">$b</span></span><br><span class="line"></span><br><span class="line">result=$[a+b]</span><br><span class="line"><span class="comment">#the[], is used to calculate the result.</span></span><br></pre></td></tr></table></figure><p>应当注意后面的情况，此时中括号用于计算结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;shell学习笔记&quot;&gt;&lt;a href=&quot;#shell学习笔记&quot; class=&quot;headerlink&quot; title=&quot;shell学习笔记&quot;&gt;&lt;/a&gt;shell学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/linux/linux-shell-passing-arguments.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;shell简介&quot;&gt;&lt;a href=&quot;#shell简介&quot; class=&quot;headerlink&quot; title=&quot;shell简介&quot;&gt;&lt;/a&gt;shell简介&lt;/h2&gt;&lt;p&gt;shell本身是用户访问内核的桥梁，所谓的shell学习，实际上是学习shell脚本。&lt;/p&gt;
&lt;p&gt;和大多数脚本语言一样，shell只需要一个编辑器和一个解释器就可以了，常见的shell解释器种类众多，有sh、bash、zsh等，我们本次学习bash脚本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://lyhhhhhhhhhhh.github.io/categories/Shell/"/>
    
    
      <category term="技术" scheme="http://lyhhhhhhhhhhh.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>My first blog</title>
    <link href="http://lyhhhhhhhhhhh.github.io/2020/01/23/My-first-blog/"/>
    <id>http://lyhhhhhhhhhhh.github.io/2020/01/23/My-first-blog/</id>
    <published>2020-01-22T16:13:24.000Z</published>
    <updated>2020-01-23T02:54:03.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>费了不少功夫才把这个博客搭好</p><p>虽然大部分是按照前人走过的路来搞得，但是也需要自己去摸索一些东西</p><p>很早就想有这样一个平台来记录自己的学习过程了，想通过这样一点一滴的记录看到自己的成长</p><p>这样才有动力去向着996的生活进发，hhhhhhhhhh</p><p>加油，奥力给！！！</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇博客&quot;&gt;&lt;a href=&quot;#第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客&quot;&gt;&lt;/a&gt;第一篇博客&lt;/h1&gt;&lt;p&gt;费了不少功夫才把这个博客搭好&lt;/p&gt;
&lt;p&gt;虽然大部分是按照前人走过的路来搞得，但是也需要自己去摸索一些东西&lt;/p&gt;
&lt;p&gt;很早就想有这样一个平台来记录自己的学习过程了，想通过这样一点一滴的记录看到自己的成长&lt;/p&gt;
&lt;p&gt;这样才有动力去向着996的生活进发，hhhhhhhhhh&lt;/p&gt;
&lt;p&gt;加油，奥力给！！！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="心得" scheme="http://lyhhhhhhhhhhh.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>
